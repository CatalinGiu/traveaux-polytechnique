/*
-- File : control.n
--
-- Contents : nML model for the DLX processor -- control instructions.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/



opn control_instr(br_instr | j_instr | jal_instr | jalr_instr | jr_instr |
		  nop_instr | swbrk_instr | do_instr | doi_instr ); 

// Jump pipeline for j and jal
//
// i   : j    : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : t1   :         IF  ID  EX  ME  WB

// Jump pipeline for jalr, jar, beqz-taken and bnez-taken
// Branch not taken pipeline: beqz-not-taken and bnez-not-taken
//
// i   : beqz : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : ds2  :         IF  ID  EX  ME  WB
// i+3 : n1   :             IF  ID  EX  ME  WB

trn cnd<bool>;
trn of16<int16>;
trn of26<int26>;
trn trgt<w32>;
trn lnk<w32>;

trn ds1<uint1>;    hw_init ds1 = 0;
trn ds2<uint1>;    hw_init ds2 = 0;

fu eq;   // test beqz or bnez
trn eqA<w32>;

fu pca;
trn pcaA<w32>;
trn pcaB<w32>;
trn pcaC<w32>;

opn br_instr(op: opcode, a: rdS1, i: c16s) 
{
    action {
    stage ID:
        a;
	ds1 = 1;
    stage EX:
	switch (op) {
	case beqz: cnd = eqz(eqA=pS1) @eq; 
	case bnez: cnd = nez(eqA=pS1) @eq;
	}
	br(cnd,of16=i);
	ds2 = 1;
    }
    syntax : op " " a ",#" dec i;
    image  : op::a::"00000"::i, delay_slots(2), chess_pc_offset(2), class(jump_ex);
}

opn j_instr(i: c26s) 
{
    action {
    stage ID: 
        j(of26=i);
	ds1 = 1;
    }
    syntax : "j #" dec i;
    image  : opcode.j::i, delay_slots(1), chess_pc_offset(1), class(jump_id);
}

opn jal_instr(lr: wrLR, i: c26s) 
{
    action { 
    stage ID: 
#if defined(__programmers_view__) 
	lnk = jal(of26=i); 
#else
	jal(of26=i); 
	lnk = pcaC = pcadd(pcaA=pcr=PC,pcaB=4) @pca;
	ds1 = 1;
#endif
    stage ID..WB:
	lr;
    }
    syntax : "jal #" dec i;
    dummy_syntax : lr;
    image  : opcode.jal::i, delay_slots(1), chess_pc_offset(1), class(jump_id);
}

opn jalr_instr(lr: wrLR, b: rdS2) 
{
    action { 
    stage ID: 
        b;
#if defined(__programmers_view__) 
    stage ID..EX:
	lnk`ID` = jalr(trgt=pS2`EX`); 
#else
    stage ID:
	lnk = pcaC = pcadd(pcaA=pcr=PC,pcaB=8) @pca;
	ds1 = 1;
    stage EX:
	jalr(trgt=pS2); 
	ds2 = 1;
#endif
    stage ID..WB:
	lr;
    }
    syntax : "jalr " b;
    dummy_syntax : lr;
    image  : opcode.jalr::b::"00000"::"0000000000000000", delay_slots(2), class(jump_ex);
}

opn jr_instr(a: rdS1) 
{
    action {
    stage ID: 
        a;
	ds1 = 1;
    stage EX: 
        jr(trgt=pS1);
	ds2 = 1;
    }  
    syntax : "jr " a;
    image  : opcode.jr::a::"00000"::"0000000000000000", delay_slots(2), class(jump_ex);
}

opn nop_instr() 
{
    action { stage ID: nop(); }  
    syntax : "nop";
    image  : opcode.function::"00000"::"00000"::"00000"::function_code.nop;
}

trn lnk_pf<addr>;   // link to the instruction in the pre-fetch stage (PC+1)
hw_init lnk_pf = 0;

trn le_offs<int16>;

opn loop(last: c16s)
{
    action {
    stage EX:
        le_offs = last;
        hwdo(lcw,le_offs);
#if !defined(__programmers_view__)
        LF = lfw = incr(lfr=LF);
        pcaB = le_offs;
        pcaC = pcadd(pcaA=pcr=PC,pcaB) @pca;
        LE[lfw] = lew = pcaC;
        LS[lfw] = lsw = lnk_pf;
        LC[lfw] = lcw;
#endif
    }
    syntax : last;
    image : last, delay_slots(2), chess_pc_offset(2);
}

opn do_instr(a: rdS1, l: loop)
{
    action {
    stage ID:
        a;
        ds1 = 1;
    stage EX:
        lcw = pS1;
        l;
    }
    syntax : "do " a "," l;
    image : opcode.do::a::"xxxxx"::l;
}

opn doi_instr(count: c10u, l: loop)
{
    action {
    stage EX:
        lcw = count;
        l;
    }
    syntax : "doi " dec count "," l;
    image : opcode.doi::count::l;
}


